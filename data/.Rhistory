confusionMatrix(predictions,testing$classe)
prediction.submit <- predict(rf.model,newdata=pml.submit[, f_vec])
prediction.submit
f_vec <- c(2,3,4,7,8,9,10)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
pml.submit[, f_vec]
head(training[,f_vec])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
predictions <- predict(rf.model,newdata=testing[,f_vec_class])
table(predictions)
confusionMatrix(predictions,testing$classe)
prediction.submit <- predict(rf.model,newdata=pml.submit[, f_vec])
prediction.submit
f_vec <- c(2,3,4,5, 7,8,9,10)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
pml.submit[, f_vec]
head(training[,f_vec])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
predictions <- predict(rf.model,newdata=testing[,f_vec_class])
table(predictions)
confusionMatrix(predictions,testing$classe)
prediction.submit <- predict(rf.model,newdata=pml.submit[, f_vec])
prediction.submit
f_vec <- c(2,3,4,5, 7,8,9,10,11:100)
f_vec
f_vec <- c(2,3,4, 7)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
pml.submit[, f_vec]
head(training[,f_vec])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
predictions <- predict(rf.model,newdata=testing[,f_vec_class])
table(predictions)
confusionMatrix(predictions,testing$classe)
prediction.submit <- predict(rf.model,newdata=pml.submit[, f_vec])
prediction.submit
f_vec <- c(2,3,4, 5,7)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
pml.submit[, f_vec]
head(training[,f_vec])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
predictions <- predict(rf.model,newdata=testing[,f_vec_class])
table(predictions)
confusionMatrix(predictions,testing$classe)
prediction.submit <- predict(rf.model,newdata=pml.submit[, f_vec])
prediction.submit
f_vec <- c(2,3,4, 6,7)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
pml.submit[, f_vec]
head(training[,f_vec])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
predictions <- predict(rf.model,newdata=testing[,f_vec_class])
table(predictions)
confusionMatrix(predictions,testing$classe)
prediction.submit <- predict(rf.model,newdata=pml.submit[, f_vec])
prediction.submit
f_vec <- c(2,3,4, 7,8:10)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
pml.submit[, f_vec]
head(training[,f_vec])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
predictions <- predict(rf.model,newdata=testing[,f_vec_class])
table(predictions)
confusionMatrix(predictions,testing$classe)
prediction.submit <- predict(rf.model,newdata=pml.submit[, f_vec])
prediction.submit
f_vec <- c(2,3,4, 7,8:50)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
pml.submit[, f_vec]
head(training[,f_vec])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
predictions <- predict(rf.model,newdata=testing[,f_vec_class])
table(predictions)
confusionMatrix(predictions,testing$classe)
prediction.submit <- predict(rf.model,newdata=pml.submit[, f_vec])
prediction.submit
f_vec <- c(2,3,4, 7,8:10)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
pml.submit[, f_vec]
head(training[,f_vec])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
f_vec <- c(2,3,4, 7,8:25)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
pml.submit[, f_vec]
head(training[,f_vec])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
#f_vec <- c(2,3,4,5,6,7)
f_vec <- c(2,3,4, 7,8:20)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
pml.submit[, f_vec]
head(training[,f_vec])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
f_vec <- c(2,3,4, 7,8:15)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
pml.submit[, f_vec]
head(training[,f_vec])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
f_vec <- c(2,3,4, 7,8:12)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
pml.submit[, f_vec]
head(training[,f_vec])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
f_vec <- c(2,3,4, 7,8:10)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
pml.submit[, f_vec]
head(training[,f_vec])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
f_vec <- c(2,3,4, 7,8:11)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
pml.submit[, f_vec]
head(training[,f_vec])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
f_vec <- c(2,3,4, 7,8:12)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
pml.submit[, f_vec]
head(training[,f_vec])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
head(training[,f_vec])
table(pml$kurtosis_roll_belt)
names(pml)[f_vec_class]
str(pml$kurtosis_roll_belt)
head(training[,f_vec])
str(pml$yaw_belt)
head(training[,f_vec])
as.numeric(pml$kurtosis_roll_belt)
pml$kurtosis_roll_belt[1:100]
as.numeric(pml$kurtosis_roll_belt)
as.numeric(pml$kurtosis_roll_belt[1:100])
pml$kurtosis_roll_belt[1:100]
as.numeric(pml$kurtosis_roll_belt[1:100])
pml$kurtosis_roll_belt[17:20]
pml$kurtosis_roll_belt[17:25]
pml$kurtosis_roll_belt[20:25]
pml$kurtosis_roll_belt[22:25]
pml$kurtosis_roll_belt[24:25]
pml$kurtosis_roll_belt[245]
pml$kurtosis_roll_belt[24]
as.numeric(pml$kurtosis_roll_belt[25])
pml$kurtosis_roll_belt[24]
str(pml$kurtosis_roll_belt[24])
?read.csv
default.stringsAsFactors()
?colClasses
summarry(pml$kurtosis_roll_belt)
summary(pml$kurtosis_roll_belt)
summary([, f_vec])
summary(pml[, f_vec])
summary(pml)
pml <- read.csv("pml-training.csv", na.strings = c("", "NA", "#DIV/0!"))
summary(pml)
setwd("C:\\Data\\Coursera\\statistics-001\\programm_assigment\\data")
dir()
pml <- read.csv("pml-training.csv", na.strings = c("", "NA", "#DIV/0!"))
pml.submit <- read.csv("pml-testing.csv")
names(pml)
dim(pml)
head(pml)
table(pml$classe)
table(pml$user_name)
summary(pml)
names(pml.submit)
dim(pml.submit)
pml.submit$problem_id
table(pml.submit$user_name)
table(pml$classe)
setwd("C:\\Data\\Coursera\\statistics-001\\programm_assigment\\data")
dir()
pml <- read.csv("pml-training.csv", na.strings = c("", "NA", "#DIV/0!"))
pml.submit <- read.csv("pml-testing.csv", na.strings = c("", "NA", "#DIV/0!"))
names(pml)
dim(pml)
head(pml)
table(pml$classe)
table(pml$user_name)
summary(pml)
names(pml.submit)
dim(pml.submit)
pml.submit$problem_id
table(pml.submit$user_name)
table(pml$classe)
f_vec <- c(2,3,4, 7,8:12)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
f_vec <- c(2,3,4, 7,8:11)
f_vec_class <-  c(f_vec, c(160))
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, mtry=150, do.trace=1, importance=TRUE, na.action=na.omit)
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, do.trace=1, importance=TRUE, na.action=na.omit)
summary(pml[, f_vec])
f_vec <- c(2,3,4, 7,8:12)
f_vec_class <-  c(f_vec, c(160))
summary(pml[, f_vec])
str(pml$kurtosis_roll_belt[24])
summary(training[, f_vec])
library(caret)
inTrain <- createDataPartition(y=pml$classe, p=0.7, list = FALSE)
training <- pml[inTrain,]
testing <- pml[-inTrain,]
dim(training); dim(testing)
set.seed(789456)
inTrain <- createDataPartition(y=pml$classe, p=0.7, list = FALSE)
training <- pml[inTrain,]
testing <- pml[-inTrain,]
dim(training); dim(testing)
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, do.trace=1, importance=TRUE, na.action=na.omit)
f_vec <- c(2,3,4, 7,8:12)
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, do.trace=1, importance=TRUE, na.action=na.omit)
f_vec <- c(2,3,4, 7,8:100)
f_vec_class <-  c(f_vec, c(160))
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, do.trace=1, importance=TRUE, na.action=na.omit)
f_vec_class <-  c(f_vec, c(160))
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, do.trace=1, importance=TRUE, na.action=na.omit)
f_vec <- c(2,3,4, 7,8:50)
f_vec_class <-  c(f_vec, c(160))
summary(training[, f_vec])
summary(training[, f_vec_class])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, do.trace=1, importance=TRUE)
?na.omit
na.omit(training)
dim(na.omit(training))
dim(training)
dim(na.omit(training))
dim(na.exclude(training))
dim(fail(training))
dim(na.fail(training))
dim(na.pass(training))
summary(na.pass(training))
is.na(pml)
pml[is.na(pml)] <- -99999
summary(pml)
library(caret)
set.seed(789456)
inTrain <- createDataPartition(y=pml$classe, p=0.7, list = FALSE)
training <- pml[inTrain,]
testing <- pml[-inTrain,]
dim(training); dim(testing)
library(randomForest)
##
summary(pml)
table(training$classe)
table(testing$classe)
table(testing$user_name, testing$classe)
summary(num_window)
LeackageFeaturesVector <- c(2,3,4,5,6,7)
#f_vec <- c(2,3,4,5,6,7)
f_vec <- c(2,3,4, 7,8:50)
f_vec_class <-  c(f_vec, c(160))
as.numeric(pml$kurtosis_roll_belt[25])
str(pml$kurtosis_roll_belt[24])
f_vec <- c(2,3,4, 7,8:50)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
summary(training[, f_vec_class])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=10, do.trace=1, importance=TRUE, na.action=na.omit)
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=100, do.trace=1, importance=TRUE, na.action=na.omit)
f_vec <- c(2,3,4, 7,8)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
summary(training[, f_vec_class])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=100, do.trace=1, importance=TRUE, na.action=na.omit)
names(rf.model)
rf.model$importance
rf.model$importance$MeanDecreaseAccuracy
importance <- rf.model$importance
importance$MeanDecreaseAccuracy
str(importance)
unlist(importance)
str(unlist(importance))
str(data.frame(unlist(importance)))
data.frame(unlist(importance))
data.frame(unlist(importance))$MeanDecreaseAccuracy
data.frame((importance))$MeanDecreaseAccuracy
importance <- data.frame(rf.model$importance)
importance[order(importance$MeanDecreaseAccuracy),]
predictions <- predict(rf.model,newdata=testing[,f_vec_class])
importance[order(-importance$MeanDecreaseAccuracy),]
f_vec <- c(2,3,4, 7,8:100)
f_vec <- c(8:159)
f_vec_class <-  c(f_vec, c(160))
names(pml)[f_vec_class]
summary(training[, f_vec_class])
rf.model <- randomForest(classe ~ ., data = training[,f_vec_class], ntree=100, do.trace=1, importance=TRUE, na.action=na.omit)
importance <- data.frame(rf.model$importance)
importance[order(-importance$MeanDecreaseAccuracy),]
predictions <- predict(rf.model,newdata=testing[,f_vec_class])
table(predictions)
confusionMatrix(predictions,testing$classe)
prediction.submit <- predict(rf.model,newdata=pml.submit[, f_vec])
prediction.submit
confusionMatrix(predictions,testing$classe)
prediction.submit <- predict(rf.model,newdata=pml.submit[, f_vec])
prediction.submit
pml.submit[, f_vec]
pml.submit[is.na(pml)] <- -99999
pml.submit[is.na(pml.submit)] <- -99999
prediction.submit <- predict(rf.model,newdata=pml.submit[, f_vec])
prediction.submit
LeackageFeaturesVector <- c(2,3,4,5,6,7)
LeackageFeaturesVector <- c(2,3,4,5,6,7)
LeackageFV_with_class <-  c(f_vec, c(160))
rf.model.leackage <- randomForest(classe ~ ., data = training[,LeackageFV_with_class], ntree=100, do.trace=1, importance=TRUE, na.action=na.omit)
LeackageFeaturesVector <- c(2,3,4,5,6,7)
LeackageFV_with_class <-  c(f_vec, c(160))
training[,LeackageFV_with_class]
LeackageFeaturesVector <- c(2,3,4,5,6,7)
LeackageFV_with_class <-  c(LeackageFeaturesVector, c(160))
rf.model.leackage <- randomForest(classe ~ ., data = training[,LeackageFV_with_class], ntree=100, do.trace=1, importance=TRUE, na.action=na.omit)
rf.model.leackage
importance.leackage  <- data.frame(rf.model.leackage$importance);  importance.leackage [order(-importance.leackage$MeanDecreaseAccuracy),]
predictions.leackage  <- predict(rf.model.leackage ,newdata=testing[,f_vec_class]); table(predictions.leackage )
testing[,f_vec_class]
predictions.leackage  <- predict(rf.model.leackage ,newdata=testing[,LeackageFeaturesVector]); table(predictions.leackage )
confusionMatrix(predictions.leackage ,testing$classe)
prediction.submit <- predict(rf.model,newdata=pml.submit[, LeackageFeaturesVector]); prediction.submit
leakageFeaturesVector <- c(2,3,4,5,6,7)
leakageFV_with_class <-  c(leakageFeaturesVector, c(160))
rf.model.leakage <- randomForest(classe ~ ., data = training[,leakageFV_with_class], ntree=100, do.trace=1, importance=TRUE, na.action=na.omit)
importance.leakage  <- data.frame(rf.model.leakage$importance);  importance.leakage [order(-importance.leakage$MeanDecreaseAccuracy),]
predictions.leakage  <- predict(rf.model.leakage ,newdata=testing[,leakageFeaturesVector]); table(predictions.leakage )
confusionMatrix(predictions.leakage ,testing$classe)
prediction.submit.leakage <- predict(rf.model,newdata=pml.submit[, leakageFeaturesVector]); prediction.submit
predictions.leakage
confusionMatrix(predictions.leakage ,testing$classe)
importance.leakage  <- data.frame(rf.model.leakage$importance);  importance.leakage [order(-importance.leakage$MeanDecreaseAccuracy),]
predictions.leakage  <- predict(rf.model.leakage ,newdata=testing[,leakageFeaturesVector]); table(predictions.leakage )
confusionMatrix(predictions.leakage ,testing$classe)
prediction.submit.leakage <- predict(rf.model.leakage, newdata=pml.submit[, leakageFeaturesVector]); prediction.submit.leakage
leakageFeaturesVector <- c(2,3,4,7)
leakageFV_with_class <-  c(leakageFeaturesVector, c(160))
rf.model.leakage <- randomForest(classe ~ ., data = training[,leakageFV_with_class], ntree=100, do.trace=1, importance=TRUE, na.action=na.omit)
importance.leakage  <- data.frame(rf.model.leakage$importance);  importance.leakage [order(-importance.leakage$MeanDecreaseAccuracy),]
predictions.leakage  <- predict(rf.model.leakage ,newdata=testing[,leakageFeaturesVector]); table(predictions.leakage )
confusionMatrix(predictions.leakage ,testing$classe)
prediction.submit.leakage <- predict(rf.model.leakage, newdata=pml.submit[, leakageFeaturesVector]); prediction.submit.leakage
names(pml)[leakageFV_with_class]
importance.leakage  <- data.frame(rf.model.leakage$importance);  importance.leakage [order(-importance.leakage$MeanDecreaseAccuracy),]
leakageFeaturesVector <- c(2,3,4,5,6, 7)
leakageFV_with_class <-  c(leakageFeaturesVector, c(160))
names(pml)[leakageFV_with_class]
rf.model.leakage <- randomForest(classe ~ ., data = training[,leakageFV_with_class], ntree=100, do.trace=1, importance=TRUE, na.action=na.omit)
importance.leakage  <- data.frame(rf.model.leakage$importance);  importance.leakage [order(-importance.leakage$MeanDecreaseAccuracy),]
predictions.leakage  <- predict(rf.model.leakage ,newdata=testing[,leakageFeaturesVector]); table(predictions.leakage )
confusionMatrix(predictions.leakage ,testing$classe)
pml$cvtd_timestamp[1:12]
str(pml$cvtd_timestamp[1:12])
str(pml$cvtd_timestamp[12])
str(pml.submit$cvtd_timestamp[12])
names(pml)[leakageFV_with_class]
str(pml$new_windiw[12])
str(pml$new_window[12])
str(pml.submit$new_window[12])
?levels
levels(pml.submit$new_window)
levels(pml$new_window)
pml.submit$new_window
levels(pml$new_window)
levels(pml.submit$new_window)
levels(pml.submit$new_window) <- levels(pml$new_window)
pml.submit$new_window
levels(pml.submit$cvtd_timestamp)
levels(pml$cvtd_timestamp))
levels(pml$cvtd_timestamp)
levels(pml.submit$cvtd_timestamp)
levels(pml$cvtd_timestamp)
levels(pml.submit$cvtd_timestamp)
levels(pml$cvtd_timestamp)
pml.submit$cvtd_timestamp
levels(pml.submit$cvtd_timestamp)
levels(pml$cvtd_timestamp)
levels(pml.submit$cvtd_timestamp) <- levels(pml$cvtd_timestamp)
pml.submit$cvtd_timestamp
levels(pml.submit$cvtd_timestamp)
pml.submit <- read.csv("pml-testing.csv", na.strings = c("", "NA", "#DIV/0!"))
pml.submit[is.na(pml.submit)] <- -99999
pml.submit$cvtd_timestamp
gl(2, 4, 8)
f <- factor(c("a","b"))
levels(f)
f
levels(f) <- c("c", "a", "b")
f
level("a")
?factor()
f <- factor(c("a","b"), levels= c("c", "a", "b"))
f
pml.submit$new_window
levels(pml.submit$new_window) <- factor(pml.submit$new_window, levels(pml$new_window))
pml.submit$new_window
pml.submit$new_window <- factor(pml.submit$new_window, levels(pml$new_window))
pml.submit$new_window
pml.submit$cvtd_timestamp
pml.submit$cvtd_timestamp <- factor(pml.submit$cvtd_timestamp,levels(pml$cvtd_timestamp))
pml.submit$cvtd_timestamp
prediction.submit.leakage <- predict(rf.model.leakage, newdata=pml.submit[, leakageFeaturesVector]); prediction.submit.leakage
leakageFeaturesVector <- c(2,3,4,5,6, 7)
leakageFV_with_class <-  c(leakageFeaturesVector, c(160))
names(pml)[leakageFV_with_class]
rf.model.leakage <- randomForest(classe ~ ., data = training[,leakageFV_with_class], ntree=100, do.trace=1, importance=TRUE)
importance.leakage  <- data.frame(rf.model.leakage$importance);  importance.leakage [order(-importance.leakage$MeanDecreaseAccuracy),]
predictions.leakage  <- predict(rf.model.leakage ,newdata=testing[,leakageFeaturesVector]); table(predictions.leakage )
confusionMatrix(predictions.leakage ,testing$classe)
prediction.submit.leakage <- predict(rf.model.leakage, newdata=pml.submit[, leakageFeaturesVector]); prediction.submit.leakage
?set
?union
setdiff(c(1:10), c(4,5))
f_Ind <- setdiff(c(2:159),leakageFeaturesInd)
leakageFeaturesInd <- c(2,3,4,5,6, 7)
f_Ind <- setdiff(c(2:159),leakageFeaturesInd)
f_Ind
names(pml)[f_Ind_class]
f_Ind_class <-  c(f_Ind, c(160))
names(pml)[f_Ind_class]
names(pml)
leakageFeaturesInd <- c(3,4,5,6, 7)
leakageFeaturesInd_WithClass <-  c(leakageFeaturesInd, c(160))
names(pml)[leakageFeaturesInd_WithClass]
rf.model.leakage <- randomForest(classe ~ ., data = training[,leakageFeaturesInd_WithClass], ntree=100, do.trace=1, importance=TRUE)
importance.leakage  <- data.frame(rf.model.leakage$importance);  importance.leakage [order(-importance.leakage$MeanDecreaseAccuracy),]
predictions.leakage  <- predict(rf.model.leakage ,newdata=testing[,leakageFeaturesInd]); table(predictions.leakage )
confusionMatrix(predictions.leakage ,testing$classe)
prediction.submit.leakage <- predict(rf.model.leakage, newdata=pml.submit[, leakageFeaturesInd]); prediction.submit.leakage
f_Ind <- setdiff(c(2:159),leakageFeaturesInd)
f_Ind_class <-  c(f_Ind, c(160))
names(pml)[f_Ind_class]
summary(training[, f_Ind_class])
rf.model <- randomForest(classe ~ ., data = training[,f_Ind_class], ntree=100, do.trace=1, importance=TRUE, na.action=na.omit)
importance <- data.frame(rf.model$importance);    importance[order(-importance$MeanDecreaseAccuracy),]
predictions <- predict(rf.model,newdata=testing[,f_Ind_class]);   table(predictions)
confusionMatrix(predictions,testing$classe)
prediction.submit <- predict(rf.model,newdata=pml.submit[, f_Ind])
prediction.submit
prediction.submit.leakage
rf.model <- randomForest(classe ~ ., data = training[,f_Ind_class], ntree=10, do.trace=1, importance=TRUE, na.action=na.omit)
rf.model <- randomForest(classe ~ ., data = training[,f_Ind_class], ntree=100, do.trace=1, importance=TRUE, na.action=na.omit)
#f_Ind <- c(2,3,4,5,6,7)
f_Ind <- setdiff(c(3:159),leakageFeaturesInd)
f_Ind_class <-  c(f_Ind, c(160))
names(pml)[f_Ind_class]
summary(training[, f_Ind_class])
rf.model <- randomForest(classe ~ ., data = training[,f_Ind_class], ntree=100, do.trace=1, importance=TRUE, na.action=na.omit)
importance <- data.frame(rf.model$importance);    importance[order(-importance$MeanDecreaseAccuracy),]
predictions <- predict(rf.model,newdata=testing[,f_Ind_class]);   table(predictions)
confusionMatrix(predictions,testing$classe)
importance[order(-importance$MeanDecreaseAccuracy),]
importance
importance[importance$MeanDecreaseAccuracy > 0,]
dim(importance[importance$MeanDecreaseAccuracy > 0,])
dim(importance[importance$MeanDecreaseAccuracy > 0.001,])
importance[importance$MeanDecreaseAccuracy > 0.001,]
predictions <- predict(rf.model,newdata=testing[,f_Ind_class]);   table(predictions)
confusionMatrix(predictions,testing$classe)
trainControl()
modFit <- train(classe ~., method="rf", data=training, trControl = trainControl(method = "cv", number = 4)).
modFit <- train(classe ~., method="rf", data=training)
modFit <- train(classe ~., method="rf", data=data = training[,leakageFeaturesInd_WithClass])
modFit <- train(classe ~., method="rf", data = training[,leakageFeaturesInd_WithClass])
?train
modFit <- train(classe ~., method="rf", data = training[,leakageFeaturesInd_WithClass], trControl=trainControl(method = "cv", number = 4))
modFit
dim(training)
dim(testing)
dim(pml)
modFit <- train(classe ~., method="rf", data = training[,f_Ind_class], trControl=trainControl(method = "cv", number = 4))
modFit
modFit <- train(classe ~., method="rf", data = training[,f_Ind_class], trControl=trainControl(number = 4))
leakageFeaturesInd <- c(1,3,4,5,6, 7) # X, timestamps - are leackage  features.
modFit
prediction.submit.leakage
f_Ind <- setdiff(c(2:159),leakageFeaturesInd)
f_Ind
f_Ind <- setdiff(c(1:159),leakageFeaturesInd)
f_Ind
names(modFit)
mofFit$finalModel
modFit$finalModel
prediction.submit
prediction.submit.leakage
answers = rep("A", 20)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
prediction.submit
answers = as.character(prediction.submit)
answers
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
pml_write_files(answers)
